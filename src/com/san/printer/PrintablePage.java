package com.san.printer;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import java.awt.print.PrinterException;

/**
 *
 * @author M1028704
 */
public class PrintablePage extends javax.swing.JPanel implements Printable {

    private final Paper paper;
    private BufferedImage imageData;
    private int noOfPerPage = 10;

    /**
     * Creates new form PrintablePage
     *
     * @param imageData
     */
    public PrintablePage(BufferedImage imageData, int count) {
        initComponents();
        this.imageData = imageData;
        this.noOfPerPage = count;

        //Set for A4
        paper = new Paper();
        paper.setSize(595, 842);
        paper.setImageableArea(20, 20, 555, 802);

        this.setMaximumSize(new Dimension((int) paper.getWidth(), (int) paper.getHeight()));
        this.setMinimumSize(new Dimension((int) paper.getWidth(), (int) paper.getHeight()));
        this.setPreferredSize(new Dimension((int) paper.getWidth(), (int) paper.getHeight()));
    }

    private BufferedImage scale(BufferedImage before) {
        double A_width = paper.getImageableWidth();
        double E_width = A_width / 3;

        double scale = E_width / before.getWidth();
//        float scale = (this.config != null) ? this.config.scale : 1.0f;
        int w = before.getWidth();
        int h = before.getHeight();
        BufferedImage after = new BufferedImage((int) (w * scale), (int) (h * scale), before.getType());
        AffineTransform at = new AffineTransform();
        at.scale(scale, scale);
        AffineTransformOp scaleOp = new AffineTransformOp(at, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);
        after = scaleOp.filter(before, after);

        return after;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 730, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public int print(Graphics g, PageFormat pageFormat, int pageIndex) throws PrinterException {

        pageFormat.setPaper(paper);
        pageFormat.setOrientation(PageFormat.PORTRAIT);
        if (pageIndex == 0) {
            if (imageData != null) {
                imageData = imageData.getSubimage(1, 1, imageData.getWidth() - 2, imageData.getHeight() - 2);
                imageData = scale(imageData);
                double A_width = paper.getImageableWidth();
                double A_height = paper.getImageableHeight();
                double I_width = imageData.getWidth();
                double I_height = imageData.getHeight();

                int xCount = (int) Math.round(A_width / I_width);
                int yCount = (int) Math.round(A_height / I_height);

                for (int y = 0; y < yCount; y++) {
                    for (int x = 0; x < xCount; x++) {
                        g.drawImage(imageData, (imageData.getWidth() * x) + 10, (imageData.getHeight() * y) + 10, this);
                    }
                }
            }

            String mark = "By: RemoIot Barcode Label Generator , Auth: Santanu Sahu";

            Font f = new Font("Arial Bold", Font.LAYOUT_RIGHT_TO_LEFT, 10);
            g.setFont(f);
            g.drawString(mark, 10, ((int) paper.getImageableHeight()) + 20);

            return (PAGE_EXISTS);
        } else {
            return (NO_SUCH_PAGE);
        }
    }
}
